{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "7863aaf8-1004-41a1-b7aa-f4fad57d200a",
   "metadata": {},
   "source": [
    "EXERCISE 1\n",
    "Write Python code that prints your name, student number and email address. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "160c55bf-9ddd-4e4d-ae06-aacac95e2246",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Haniyya fathima\n",
      "DSML45-31\n",
      "haniyyafathima2018@gmail.com\n"
     ]
    }
   ],
   "source": [
    "print(\"Haniyya fathima\")\n",
    "print(\"DSML45-31\")\n",
    "print(\"haniyyafathima2018@gmail.com\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ec254c53-d1a9-401d-9651-eb682edc7baa",
   "metadata": {},
   "outputs": [],
   "source": [
    "...................................."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b0d3a9f4-c6fa-41f2-a346-4a9c098870eb",
   "metadata": {},
   "source": [
    "EXERCISE 2 \n",
    "Write Python code that prints your name, student number and email address using escape sequences."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0d2b36c4-f423-4ccd-a196-ad8b952e4fc0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Haniyya fathima\n",
      "DSML45-31\n",
      "haniyyafathima2018@gmail.com\n"
     ]
    }
   ],
   "source": [
    "print(\"Haniyya fathima\\nDSML45-31\\nhaniyyafathima2018@gmail.com\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "835d96a7-9f8b-4b6d-a6b2-2cc7ec9b043e",
   "metadata": {},
   "outputs": [],
   "source": [
    "........................................"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b611323c-a64b-45f5-a573-044a39d0ee0d",
   "metadata": {},
   "source": [
    "EXERCISE 3\n",
    "Write Python code that add, subtract, multiply and divide the two numbers.You can use the two numbers 14 and 7."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "b1201ba2-5be9-4d94-9001-bcc62059d470",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Addition: 14+7= 21\n",
      "Subtraction: 14-7= 7\n",
      "Multiplication: 14*7= 98\n",
      "Division: 14/7 =  2.0\n"
     ]
    }
   ],
   "source": [
    "print('Addition: 14+7=',14+7)\n",
    "print('Subtraction: 14-7=', 14-7)\n",
    "print('Multiplication: 14*7=',14*7)\n",
    "print('Division: 14/7 = ',14/7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "28d681ee-0a88-4708-b29b-77fceffa873f",
   "metadata": {},
   "outputs": [],
   "source": [
    "x=14\n",
    "y=7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "0b407f17-8877-448e-9e62-453d2e16e18d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "21"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x+y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "504ea929-b92b-4abb-8a17-01741c56623b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x-y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "9da7ce54-553c-4790-8142-8f31385ffcf5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "98"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x*y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "63b55407-be24-433a-9998-19752a982394",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.0"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x/y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5499231d-bab8-4010-aa29-6f1c1cddfc87",
   "metadata": {},
   "outputs": [],
   "source": [
    "......................................."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "10c27941-21e2-424c-b65e-a802c7616745",
   "metadata": {},
   "source": [
    "EXERCISE 4\n",
    "Write Python code that displays the numbers from 1 to 5 as steps"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "a268ca6d-56c8-4fd2-bdf8-7ddbfddbc711",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n"
     ]
    }
   ],
   "source": [
    "for a in range(1,6):\n",
    " print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "0f47d959-d9b5-4cb4-bb82-05500f20eac8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n"
     ]
    }
   ],
   "source": [
    " print(\"1\\n2\\n3\\n4\\n5\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bf1cf3ec-4b7b-4d20-8443-56bc7f6c26b0",
   "metadata": {},
   "outputs": [],
   "source": [
    "................................"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b875c8f-68b5-4ef7-b04e-a56d6ec7e3c8",
   "metadata": {},
   "source": [
    "EXERCISE 5\n",
    "Write Python code that outputs the following sentence (including the quotation marks and line break) to the screen: An example runs of the program: \"SDK\" stands for \"Software Development Kit\", whereas\"IDE\" stands for \"Integrated Development Environment\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "8ebab492-c582-465f-8a3b-eaa82168ae03",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\"SDK\" stands for \"Software Development Kit\", whereas \n",
      "\"IDE\" stands for \"Integrated Devolepment Environment\"\n"
     ]
    }
   ],
   "source": [
    "print(\"\\\"SDK\\\" stands for \\\"Software Development Kit\\\", whereas \\n\\\"IDE\\\" stands for \\\"Integrated Devolepment Environment\\\"\" )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "80ff5108-2983-4970-8e26-c20d9dac4f57",
   "metadata": {},
   "outputs": [],
   "source": [
    "..............................."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aeecd3d7-0baa-460e-8d82-185a05620ff8",
   "metadata": {},
   "source": [
    "EXERCISE 6\n",
    "Practice and check the output "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "c47a7186-64b5-47d3-be39-79f8479639d7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "python is an \"awesome\" language.\n",
      "python\n",
      "\t2023\n",
      "I'm from Entri\n",
      "5\n",
      "e\n",
      "Entri\n",
      "2023\n",
      "Entr2023\n",
      "Entri*20"
     ]
    }
   ],
   "source": [
    "print(\"python is an \\\"awesome\\\" language.\")\n",
    "print(\"python\\n\\t2023\")\n",
    "print('I\\'m from Entri.\\b')\n",
    "print(\"\\65\")\n",
    "print(\"\\x65\")\n",
    "print(\"Entri\", \"2023\", sep=\"\\n\")\n",
    "print(\"Entri\", \"2023\", sep=\"\\b\")\n",
    "print(\"Entri\", \"2023\", sep=\"*\", end=\"\\b\\b\\b\\b\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "41971cf3-0a03-4eb5-a7cb-bdc97ce96404",
   "metadata": {},
   "outputs": [],
   "source": [
    "....................................."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9cc41faf-cba9-4921-b698-aee5c9f29636",
   "metadata": {},
   "source": [
    "EXERCISE 7\n",
    "Define the variables below. Print the types of each variable. What is the sum of your variables? (Hint: use a type conversion function.) What datatype is the sum? num=23 textnum=\"57\" decimal=98.3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "e186b4aa-6208-41f1-888d-6c9cb690c4b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "num=23 \n",
    "textnum=\"57\" \n",
    "decimal=98.3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "772d7e0c-6908-44f0-b8f9-e1dc9e5d5ea9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The type of num is : <class 'int'>\n",
      "The type of textnum is : <class 'str'>\n",
      "The type of decimal is : <class 'float'>\n"
     ]
    }
   ],
   "source": [
    "print(\"The type of num is :\",type(num))\n",
    "print(\"The type of textnum is :\",type(textnum))\n",
    "print(\"The type of decimal is :\",type(decimal))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "id": "fe3b765a-4362-4106-9e58-60e2605e4ee4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sum: 178.3\n"
     ]
    }
   ],
   "source": [
    "# Converting textnum to int and calculating sum\n",
    "total_sum = num + int(textnum) + decimal\n",
    "print(\"Sum:\", total_sum)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "id": "c07fac16-9942-468c-a066-f030acf51df0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Type of sum: <class 'float'>\n"
     ]
    }
   ],
   "source": [
    "print(\"Type of sum:\", type(total_sum))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "243ce11a-3285-470d-ac93-22fb74400046",
   "metadata": {},
   "outputs": [],
   "source": [
    "..........................................."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dbd0663b-61e1-4bc9-b8a9-439b8953faee",
   "metadata": {},
   "source": [
    "EXERCISE 8\n",
    "calculate the number of minutes in a year using variables for each unit of time. print a statement that describes what your code does also. Create three variables to store no of days in a year, minute in a hour, hours in a day, then calculate the total minutes in a year and print the values (hint) total number of minutes in an year =No.of days in an year * Hours in a day * Minutes in an hour"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "id": "c99b1215-e2ca-4eb0-b403-51cabe9d94a8",
   "metadata": {},
   "outputs": [],
   "source": [
    "days_in_year = 365\n",
    "hours_in_day = 24\n",
    "minutes_in_hour = 60"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "id": "10c83b67-77be-4ea9-a91a-48d9cb229b31",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number of minutes in a year is: 525600\n"
     ]
    }
   ],
   "source": [
    "total_minutes = days_in_year * hours_in_day * minutes_in_hour\n",
    "print(\"The number of minutes in a year is:\",total_minutes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f9d2c1fd-b0a3-4db4-a0a2-b089e44bb855",
   "metadata": {},
   "outputs": [],
   "source": [
    "......................................................."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ed1526c0-0540-4af5-abb7-d089d4d2d9a5",
   "metadata": {},
   "source": [
    "EXERCISE 9\n",
    "Write Python code that asks the user to enter his/her name and then output/prints his/her name with a greeting. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "id": "e033f1c6-ac3b-4f39-a9bd-29c023c0b188",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Please enter your name: Haniyya fathima\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hi Haniyya fathima, welcome to Python programming :)\n"
     ]
    }
   ],
   "source": [
    "name = input(\"Please enter your name:\")\n",
    "print(f\"Hi {name}, welcome to Python programming :)\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9ab52a6b-f9ff-4e4d-9e97-94b6c7e12ef5",
   "metadata": {},
   "outputs": [],
   "source": [
    ".........................................."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "89774466-4680-44e7-80a7-a729c91793f4",
   "metadata": {},
   "source": [
    "EXERCISE 10\n",
    "Name your file: PoundsToDollars.py Write a program that asks the user to enter an amount in pounds (£) and the program calculates and converts an amount in dollar ($) An example runs of the program: Please enter amount in pounds: XXX £ XXX are $ XXX"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "id": "098c39be-0f4d-438e-a97e-bd3380ad0ea3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Please enter amount in pounds: £ 100\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "£100.0 are $135.00\n"
     ]
    }
   ],
   "source": [
    "pounds = float(input(\"Please enter amount in pounds: £\"))\n",
    "conversion_rate = 1.35  #( 1 GBP = 1.35 USD)\n",
    "dollars = pounds * conversion_rate\n",
    "print(f\"£{pounds} are ${dollars:.2f}\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
